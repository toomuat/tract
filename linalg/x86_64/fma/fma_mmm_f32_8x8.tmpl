{% comment %}
// vim: set syntax=asm :

/* mmm 16 x 6:

    ymm0 ymm2 ymm4 ymm6 ymm8 ymm10
    ymm1 ymm3 ymm5 ymm7 ymm9 ymm11

System V ABI:
    args: rdi, rsi, rdx, rcx, r8, r9
    preserve: rbx, rsp, rbp, r12, r13, r14, r15
    scratch: rax, rdi, rsi, rdx, rcx, r8, r9, r10, r11
    return: rax (+rdx)

Windows ABI:
    args: RCX, RDX, R8, R9
    preserve: RBX, RBP, RDI, RSI, RSP, R12, R13, R14, R15, and XMM6-15
    scratch: RAX, RCX, RDX, R8, R9, R10, R11, XMM0-5, and the upper portions of YMM0-15 and ZMM0-15
    return: rax (+rdx)
*/
{% endcomment %}

{% if msvc %}

_text segment
fma_mmm_f32_8x8_{{suffix}} proc

{% else %}

.intel_syntax noprefix
.text
.p2align 5
.globl {{G}}fma_mmm_f32_8x8_{{suffix}}
{{G}}fma_mmm_f32_8x8_{{suffix}}:
.cfi_startproc

{% endif %}

    push        rbp
    mov         rbp, rsp

{% if family == "windows" %}
// https://www.agner.org/optimize/calling_conventions.pdf xmm6-15 are not scratch
// https://stackoverflow.com/questions/43358429/save-value-of-xmm-registers
    and rsp,-16
    lea rsp,[rsp-160]
    vmovaps [rsp], xmm6
    vmovaps [rsp+16*1],xmm7
    vmovaps [rsp+16*2],xmm8
    vmovaps [rsp+16*3],xmm9
    vmovaps [rsp+16*4],xmm10
    vmovaps [rsp+16*5],xmm11
    vmovaps [rsp+16*6],xmm12
    vmovaps [rsp+16*7],xmm13
    vmovaps [rsp+16*8],xmm14
    vmovaps [rsp+16*9],xmm15

    push        rdi
    push        rsi

    mov         rdi, rcx

{% endif %}

    push        rbx
    push        r12
    push        r13
    push        r14
    push        r15

    sub         rsp, 8

{% if family == "unix" %}
.cfi_def_cfa_offset 64
{% endif %}

    stmxcsr     [rsp + 4]
{% if msvc %}
    mov         rax, 1FC0h
{% else %}
    mov         rax, 0x1FC0
{% endif %}
    mov         [rsp], eax
    ldmxcsr     [rsp]

{% include "dispatcher.tmpliq" %}

{{L}}clear:
    vzeroall
    jmp             {{L}}non_linear_loop


{{L}}add_mat_mul:
    mov     rbx,    [rdi + 24]   // B
    mov     rax,    [rdi + 16]   // A

    mov     rcx,    [rdi + 8]    // k
    test    rcx,    rcx
    jz      {{L}}non_linear_loop

    mov     rsi, [rbx]   // B discriminant
    cmp     rsi,  0
    je      {{L}}packed_packed

{{L}}packed_tops_and_offsets:
    mov     rsi,    [rbx + 16]  // B cols head
    mov     rbx,    [rbx + 8]   // rbx: current row offset ptr

    mov     r8,     [rsi]
    mov     r9,     [rsi + 8]
    mov     r10,    [rsi + 16]
    mov     r11,    [rsi + 24]
    mov     r12,    [rsi + 32]
    mov     r13,    [rsi + 40]
    mov     r14,    [rsi + 48]
    mov     r15,    [rsi + 56]
 
{{L}}main_loop_packed_tops_and_offsets:
    mov             rsi,    [rbx]   // rsi: current row offset

    vmovaps         ymm8,  [rax]

    vbroadcastss    ymm12,  dword ptr [r8 + rsi]
    vbroadcastss    ymm13,  dword ptr [r9 + rsi]
    vbroadcastss    ymm14,  dword ptr [r10 + rsi]
    vbroadcastss    ymm15,  dword ptr [r11 + rsi]

    vfmadd231ps     ymm0,   ymm8, ymm12
    vfmadd231ps     ymm1,   ymm8, ymm13
    vfmadd231ps     ymm2,   ymm8, ymm14
    vfmadd231ps     ymm3,   ymm8, ymm15

    vbroadcastss    ymm12,  dword ptr [r12 + rsi]
    vbroadcastss    ymm13,  dword ptr [r13 + rsi]
    vbroadcastss    ymm14,  dword ptr [r14 + rsi]
    vbroadcastss    ymm15,  dword ptr [r15 + rsi]

    vfmadd231ps     ymm4,   ymm8, ymm12
    vfmadd231ps     ymm5,   ymm8, ymm13
    vfmadd231ps     ymm6,   ymm8, ymm14
    vfmadd231ps     ymm7,   ymm8, ymm15

    add             rbx,    8
    add             rax,    32
    dec             rcx
    jnz             {{L}}main_loop_packed_tops_and_offsets

    jmp             {{L}}non_linear_loop

{{L}}packed_packed:
    mov     rbx,   [rbx + 8] // B 

{{L}}main_loop_packed_packed:
    vmovaps         ymm12,  [rax]
    
    {% for i in (0..7) %}
        vbroadcastss    ymm14, dword ptr [rbx + {{i}} * 4]
        vfmadd231ps     ymm{{i}}, ymm12, ymm14
    {% endfor %}

    add             rax,    32
    add             rbx,    32
    dec             rcx
    jnz             {{L}}main_loop_packed_packed
    jmp             {{L}}non_linear_loop

// NON LINEAR / ADDC

{% include "fma_mmm_f32_scalars.tmpliq" from:0, to:7 %}
{% include "fma_mmm_f32_per_rows.tmpliq" mr:8, from:0, to:7 %}
{% include "fma_mmm_f32_per_cols.tmpliq" mr:8, from:0, to:7 %}

{{L}}add_unicast:

    mov     r10,    [rdi + 8]           // c ptr
    mov     rsi,    [rdi + 16]          // row stride
    mov     rbx,    [rdi + 24]          // col stride

    mov     eax,    0
{% for i in (0..3) %}
    pinsrd  xmm14, eax, {{i}}
    add     eax,    esi
{% endfor %}
{% for i in (0..3) %}
    pinsrd  xmm15, eax, {{i}}
    add     eax,    esi
{% endfor %}

    vperm2f128      ymm14,  ymm14, ymm15,         32 // ymm14 <- xmm14::xmm15

{% for i in (0..7) %}
    vpcmpeqd        ymm15,  ymm15, ymm15
    vgatherdps      ymm12,  [ r10 + ymm14 ],      ymm15
    add     r10, rbx
    vaddps          ymm{{i}},   ymm{{i}},   ymm12
{% endfor %}

    jmp    {{L}}non_linear_loop

{{L}}add_row_col_products:
    mov             rax, [ rdi + 8 ]
    mov             rbx, [ rdi + 16 ]

    vmovups         ymm12,  [rax]

{% for i in (0..7) %}
    vbroadcastss    ymm14, dword ptr [rbx + {{i|times:4}} ]
    vfmadd231ps     ymm{{i}},   ymm12, ymm14
{% endfor %}
    jmp    {{L}}non_linear_loop

{{L}}store:
    mov     r8,     [rdi + 8]           // c ptr
    mov     rsi,    [rdi + 16]          // row stride
    mov     rbx,    [rdi + 24]          // col stride

    // tops of cols
    lea     r9,     [ r8 + rbx ]
    lea     r10,    [ r8 + 2 * rbx ]
    lea     r12,    [ r8 + 4 * rbx ]
    lea     r11,    [ r10 + rbx ]
    lea     r13,    [ r12 + rbx ]
    lea     r14,    [ r12 + 2 * rbx ]
    lea     r15,    [ r13 + 2 * rbx ]

    {% for quarter in (0..1) %}
        {% if quarter != 0 %}
            // move next four rows at top (xmm0,2,..10)
            {% for r in (0..7) %}
                vperm2f128  ymm{{r}},   ymm{{r}},   ymm{{r}},  {{quarter}}
            {% endfor %}
        {% endif %}
        {% for row in (0..3) %}
            {% for i in (0..7) %}
                vextractps  dword ptr [r{{i | plus: 8}}], xmm{{i}}, {{row}}
                add         r{{i | plus: 8}}, rsi
            {% endfor %}
        {% endfor %}
    {% endfor %}

    jmp     {{L}}non_linear_loop

{{L}}q_scale:
    jmp {{L}}unsupported

{{L}}return:
    ldmxcsr     [rsp + 4]
    add         rsp, 8

    pop r15
    pop r14
    pop r13
    pop r12
    pop rbx

{% if family == "windows" %}
    pop rsi
    pop rdi

    vmovaps xmm15, [rsp+16*9]
    vmovaps xmm14, [rsp+16*8]
    vmovaps xmm13, [rsp+16*7]
    vmovaps xmm12, [rsp+16*6]
    vmovaps xmm11, [rsp+16*5]
    vmovaps xmm10, [rsp+16*4]
    vmovaps xmm9, [rsp+16*3]
    vmovaps xmm8, [rsp+16*2]
    vmovaps xmm7, [rsp+16*1]
    vmovaps xmm6, [rsp]
{% endif %}

    mov rsp, rbp
    pop rbp
    ret


{% if msvc %}
fma_mmm_f32_8x8_{{suffix}} endp
_text ends
end

{% else %} 
.cfi_endproc
{% endif %}
